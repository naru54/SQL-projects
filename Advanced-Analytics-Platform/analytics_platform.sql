-- analytics_platform.sql

-- Create Tables
CREATE TABLE IF NOT EXISTS sales (
    sale_id INT PRIMARY KEY,
    product_id INT,
    customer_id INT,
    sale_date TIMESTAMP,
    quantity INT,
    total_amount DECIMAL(10, 2)
);

CREATE TABLE IF NOT EXISTS products (
    product_id INT PRIMARY KEY,
    product_name VARCHAR(255),
    category VARCHAR(50),
    price DECIMAL(10, 2)
);

CREATE TABLE IF NOT EXISTS customers (
    customer_id INT PRIMARY KEY,
    customer_name VARCHAR(255),
    email VARCHAR(255),
    phone VARCHAR(15)
);

CREATE TABLE IF NOT EXISTS employees (
    employee_id INT PRIMARY KEY,
    employee_name VARCHAR(255),
    position VARCHAR(50),
    department VARCHAR(50)
);

-- Insert Sample Data (use the provided sample data)

-- Insert Sample Data into Sales Table
INSERT INTO sales (sale_id, product_id, customer_id, sale_date, quantity, total_amount)
VALUES
    (1, 101, 201, '2023-01-15 08:30:00', 2, 100.00),
    (2, 102, 202, '2023-01-16 10:45:00', 1, 50.00),
    (3, 103, 203, '2023-01-17 12:15:00', 3, 150.00),
    (4, 104, 201, '2023-01-18 14:30:00', 1, 60.00),
    (5, 105, 204, '2023-01-19 16:45:00', 2, 90.00);

-- Insert Sample Data into Products Table
INSERT INTO products (product_id, product_name, category, price)
VALUES
    (101, 'Laptop', 'Electronics', 500.00),
    (102, 'Smartphone', 'Electronics', 250.00),
    (103, 'Headphones', 'Electronics', 50.00),
    (104, 'Coffee Maker', 'Appliances', 60.00),
    (105, 'Blender', 'Appliances', 45.00);

-- Insert Sample Data into Customers Table
INSERT INTO customers (customer_id, customer_name, email, phone)
VALUES
    (201, 'John Doe', 'john.doe@example.com', '555-123-4567'),
    (202, 'Jane Smith', 'jane.smith@example.com', '555-987-6543'),
    (203, 'Robert Johnson', 'robert.j@example.com', '555-567-8901'),
    (204, 'Emily Davis', 'emily.d@example.com', '555-234-5678');

-- Insert Sample Data into Employees Table
INSERT INTO employees (employee_id, employee_name, position, department)
VALUES
    (301, 'Alex Miller', 'Sales Rep', 'Sales'),
    (302, 'Sarah Johnson', 'Manager', 'Sales'),
    (303, 'Michael Smith', 'Engineer', 'Engineering'),
    (304, 'Rachel Davis', 'Analyst', 'Analytics');



## SQL Queries:

1. **Total Sales by Product Category:**
   ```sql
   -- Query 1
   SELECT category, SUM(total_amount) AS total_sales
   FROM sales
   JOIN products ON sales.product_id = products.product_id
   GROUP BY category;


2. Top Performing Products:
-- Query 2
SELECT product_name, SUM(quantity) AS total_quantity_sold
FROM sales
JOIN products ON sales.product_id = products.product_id
GROUP BY product_name
ORDER BY total_quantity_sold DESC
LIMIT 10;


3.Customer Purchase History:
-- Query 3
SELECT customer_name, COUNT(sale_id) AS total_purchases, SUM(total_amount) AS total_spent
FROM sales
JOIN customers ON sales.customer_id = customers.customer_id
GROUP BY customer_name
ORDER BY total_spent DESC;


4.Monthly Sales Trend:
-- Query 4
SELECT DATE_FORMAT(sale_date, '%Y-%m') AS month, SUM(total_amount) AS total_sales
FROM sales
GROUP BY month
ORDER BY month;


5.Employee Performance:

-- Query 5
SELECT employee_name, COUNT(sale_id) AS total_sales
FROM sales
JOIN employees ON sales.employee_id = employees.employee_id
GROUP BY employee_name
ORDER BY total_sales DESC;

-- Here are some advanced analytical questions along with SQL queries:

1. **What is the total revenue generated by each product category?**
   ```sql
   SELECT category, SUM(total_amount) AS total_revenue
   FROM sales
   JOIN products ON sales.product_id = products.product_id
   GROUP BY category;
   ```

2. **Which customers have made purchases in every product category?**
   ```sql
   SELECT customer_id, customer_name
   FROM customers
   WHERE customer_id IN (
       SELECT DISTINCT customer_id
       FROM sales
       JOIN products ON sales.product_id = products.product_id
       GROUP BY customer_id
       HAVING COUNT(DISTINCT category) = (SELECT COUNT(DISTINCT category) FROM products)
   );
   ```

3. **What is the average quantity sold for each product category, and how does it compare to the overall average?**
   ```sql
   SELECT category, AVG(quantity) AS avg_quantity_sold,
          (SELECT AVG(quantity) FROM sales) AS overall_avg_quantity
   FROM sales
   JOIN products ON sales.product_id = products.product_id
   GROUP BY category;
   ```

4. **Which products have shown consistent month-over-month growth in sales percentage?**
   ```sql
   SELECT product_name,
          AVG(total_amount) AS avg_monthly_sales,
          (AVG(total_amount) - LAG(AVG(total_amount), 1) OVER (PARTITION BY product_id ORDER BY sale_date)) / LAG(AVG(total_amount), 1) OVER (PARTITION BY product_id ORDER BY sale_date) * 100 AS sales_growth_percentage
   FROM sales
   JOIN products ON sales.product_id = products.product_id
   GROUP BY product_name
   ORDER BY sales_growth_percentage DESC;
   ```

5. **Which employees have the highest average sales per month?**
   ```sql
   SELECT employee_name,
          AVG(total_amount) AS avg_monthly_sales
   FROM sales
   JOIN employees ON sales.employee_id = employees.employee_id
   GROUP BY employee_name
   ORDER BY avg_monthly_sales DESC;
   ```

6. **For each product category, what is the average time between purchases for returning customers?**
   ```sql
   SELECT category, AVG(DATEDIFF(sale_date, LAG(sale_date) OVER (PARTITION BY customer_id, product_id ORDER BY sale_date))) AS avg_days_between_purchases
   FROM sales
   JOIN products ON sales.product_id = products.product_id
   GROUP BY category;
   ```

7. **Identify the top 5% of customers who contribute the most to overall revenue.**
   ```sql
   SELECT customer_id, customer_name, SUM(total_amount) AS total_revenue
   FROM sales
   JOIN customers ON sales.customer_id = customers.customer_id
   GROUP BY customer_id, customer_name
   HAVING SUM(total_amount) >= PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY total_amount) OVER () * SUM(total_amount);
   ```

8. **Which products have the highest correlation in sales over time?**
   ```sql
   SELECT p1.product_name AS product1, p2.product_name AS product2,
          CORR(s1.total_amount, s2.total_amount) AS sales_correlation
   FROM sales s1
   JOIN products p1 ON s1.product_id = p1.product_id
   JOIN sales s2 ON s1.sale_date = s2.sale_date AND s1.product_id <> s2.product_id
   JOIN products p2 ON s2.product_id = p2.product_id
   GROUP BY product1, product2
   ORDER BY sales_correlation DESC;
   ```














