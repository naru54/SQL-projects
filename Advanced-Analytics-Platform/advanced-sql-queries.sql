## Here are some advanced analytical questions along with SQL queries

1. What is the total revenue generated by each product category?
   
   SELECT category, SUM(total_amount) AS total_revenue
   FROM sales
   JOIN products ON sales.product_id = products.product_id
   GROUP BY category;
   

2. Which customers have made purchases in every product category?
  
   SELECT customer_id, customer_name
   FROM customers
   WHERE customer_id IN (
       SELECT DISTINCT customer_id
       FROM sales
       JOIN products ON sales.product_id = products.product_id
       GROUP BY customer_id
       HAVING COUNT(DISTINCT category) = (SELECT COUNT(DISTINCT category) FROM products)
   );
  

3. What is the average quantity sold for each product category, and how does it compare to the overall average?
  
   SELECT category, AVG(quantity) AS avg_quantity_sold,
          (SELECT AVG(quantity) FROM sales) AS overall_avg_quantity
   FROM sales
   JOIN products ON sales.product_id = products.product_id
   GROUP BY category;
   

4. Which products have shown consistent month-over-month growth in sales percentage?
   
   SELECT product_name, 
          AVG(total_amount) AS avg_monthly_sales,
          (AVG(total_amount) - LAG(AVG(total_amount), 1) OVER (PARTITION BY product_id ORDER BY sale_date)) / LAG(AVG(total_amount), 1) OVER (PARTITION BY product_id ORDER BY sale_date) * 100 AS sales_growth_percentage
   FROM sales
   JOIN products ON sales.product_id = products.product_id
   GROUP BY product_name
   ORDER BY sales_growth_percentage DESC;
  

5. Which employees have the highest average sales per month?

   SELECT employee_name, 
          AVG(total_amount) AS avg_monthly_sales
   FROM sales
   JOIN employees ON sales.employee_id = employees.employee_id
   GROUP BY employee_name
   ORDER BY avg_monthly_sales DESC;
   ```

6. For each product category, what is the average time between purchases for returning customers?
 
   SELECT category, AVG(DATEDIFF(sale_date, LAG(sale_date) OVER (PARTITION BY customer_id, product_id ORDER BY sale_date))) AS avg_days_between_purchases
   FROM sales
   JOIN products ON sales.product_id = products.product_id
   GROUP BY category;
 

7. Identify the top 5% of customers who contribute the most to overall revenue.

   SELECT customer_id, customer_name, SUM(total_amount) AS total_revenue
   FROM sales
   JOIN customers ON sales.customer_id = customers.customer_id
   GROUP BY customer_id, customer_name
   HAVING SUM(total_amount) >= PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY total_amount) OVER () * SUM(total_amount);
 

8. Which products have the highest correlation in sales over time?
  
   SELECT p1.product_name AS product1, p2.product_name AS product2, 
          CORR(s1.total_amount, s2.total_amount) AS sales_correlation
   FROM sales s1
   JOIN products p1 ON s1.product_id = p1.product_id
   JOIN sales s2 ON s1.sale_date = s2.sale_date AND s1.product_id <> s2.product_id
   JOIN products p2 ON s2.product_id = p2.product_id
   GROUP BY product1, product2
   ORDER BY sales_correlation DESC;
 
